import os
import re
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.tl.functions.channels import CreateChannelRequest, EditAdminRequest
from telethon.tl.functions.messages import StartBotRequest
from telethon.tl.types import ChatAdminRights
from urllib.parse import urlparse, parse_qs

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
channel_username = "@pumpfun_migration"
admin_username = "@safeguard"  # –ö–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –∞–¥–º–∏–Ω—ã

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
session_file = "my_session2"

client = TelegramClient(session_file, api_id, api_hash)

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot_started = False

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω-–∞–¥—Ä–µ—Å–∞
token_pattern = re.compile(r"([A-Za-z0-9]{34,})")


async def main():
    await client.connect()

    if not await client.is_user_authorized():
        print("–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞! –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –≤—Ä—É—á–Ω—É—é.")
        await client.disconnect()
        return

    @client.on(events.NewMessage(chats=channel_username))
    async def new_message_handler(event):
        global bot_started
        message_text = event.text.strip()
        print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {channel_username}: {message_text}")

        if not message_text:
            print("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return

        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        token_match = token_pattern.search(message_text)
        if token_match:
            token_address = token_match.group(1)
            print(f"–ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω: {token_address}")
        else:
            print("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # 1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
        try:
            result = await client(CreateChannelRequest(
                title=message_text[:30],
                about="Automatic created group",
                megagroup=True
            ))
            group = result.chats[0]
            group_id = group.id
            print(f"–ì—Ä—É–ø–ø–∞ '{message_text[:30]}' —Å–æ–∑–¥–∞–Ω–∞! ID: {group_id}")

            # 2Ô∏è‚É£ –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @safeguard
            admin = await client.get_entity(admin_username)

            # 3Ô∏è‚É£ –ù–∞–∑–Ω–∞—á–∞–µ–º @safeguard –∞–¥–º–∏–Ω–æ–º
            rights = ChatAdminRights(
                change_info=True, post_messages=True, edit_messages=True,
                delete_messages=True, ban_users=True, invite_users=True,
                pin_messages=True, add_admins=True, anonymous=False,
                manage_call=True
            )

            await client(EditAdminRequest(
                channel=group,  # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã
                user_id=admin.id,
                admin_rights=rights,
                rank="Admin"
            ))

            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º –≤ –≥—Ä—É–ø–ø–µ!")

            # 4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await client.send_message(group, "/add@safeguard")
            print("–°–æ–æ–±—â–µ–Ω–∏–µ '/add@safeguard' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")

            # 5Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ "/add@safeguard"
            @client.on(events.NewMessage(chats=group))
            async def response_handler(event):
                global bot_started
                if bot_started:
                    return  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                response_text = event.text.strip()
                sender = await event.get_sender()
                sender_name = sender.username if sender.username else sender.first_name
                message_id = event.id
                date = event.date

                print("üì• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ:")
                print(f"- –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}")
                print(f"- –¢–µ–∫—Å—Ç: {response_text}")
                print(f"- ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
                print(f"- –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {date}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if event.buttons:
                    print("üîò –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:")
                    for row in event.buttons:
                        for button in row:
                            button_text = button.text
                            button_url = button.url if hasattr(button, 'url') else '–ù–µ—Ç URL'
                            print(f"  - –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {button_text}")
                            print(f"  - URL –∫–Ω–æ–ø–∫–∏: {button_url}")

                            # –ï—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å URL, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                            if button_url != '–ù–µ—Ç URL':
                                # –ü–∞—Ä—Å–∏–º URL, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                                parsed_url = urlparse(button_url)
                                query_params = parse_qs(parsed_url.query)
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä start
                                bot_username = parsed_url.path.lstrip('/')
                                start_param = query_params.get('start', [None])[0]

                                if bot_username and start_param:
                                    print(f"–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ @{bot_username} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º {start_param}")
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º StartBotRequest
                                    await client(StartBotRequest(
                                        bot=bot_username,
                                        peer=bot_username,
                                        start_param=start_param
                                    ))

                                    bot_started = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω

                                    @client.on(events.NewMessage(from_users=bot_username))
                                    async def bot_message_handler(event):
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                                        if event.buttons:
                                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
                                            buttons = event.buttons
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –¥–≤–µ –∫–Ω–æ–ø–∫–∏
                                            if len(buttons) > 1:
                                                # –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É (–∏–Ω–¥–µ–∫—Å 1)
                                                await event.click(1)
                                                print("–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞.")
                                    
                                                # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
                                                if token_address:  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω
                                                    try:
                                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º
                                                        await client.send_message(bot_username, token_address)
                                                        print(f"–¢–æ–∫–µ–Ω {token_address} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É.")
                                                    except Exception as e:
                                                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
                                                else:
                                                    print("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                                            else:
                                                print("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–Ω–æ–ø–æ–∫.")

                                else:
                                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –±–æ—Ç–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä start –∏–∑ URL.")
                else:
                    print("–ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()

# –ó–∞–ø—É—Å–∫
with client:
    client.loop.run_until_complete(main())
